<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.gbif.checklistbank.service.mybatis.mapper.UsageMapper">

  <sql id="select">id,dataset_key,name_fk,rank,parent_fk,is_synonym,status,name_published_in_fk,according_to_fk,origin</sql>
  <!--  A mapping to build a simple Usage for the batch service -->
  <resultMap id="usageResultMap" type="Usage" autoMapping="true">
    <id property="key" column="id"/>
    <result property="nameKey" column="name_fk"/>
    <result property="parentKey" column="parent_fk"/>
    <result property="namePublishedInKey" column="name_published_in_fk"/>
  </resultMap>

  <!--  list simple usage per dataset -->
  <select id="list" parameterType="map" resultMap="usageResultMap">
    SELECT <include refid="select"/>
    FROM name_usage
    WHERE dataset_key=#{uuid,jdbcType=OTHER}
    ORDER BY id
    LIMIT #{page.limit}
    OFFSET #{page.offset}
  </select>

  <select id="listByDatasetAndDate" parameterType="map" resultType="java.lang.Integer">
    SELECT id FROM name_usage WHERE dataset_key=#{uuid,jdbcType=OTHER} AND last_interpreted &lt; #{before}
  </select>

  <!-- limit the max amounts of returned parents to 100 to avoid endless loops that bring down the JVM -->
  <select id="listParents" parameterType="map" resultType="java.lang.Integer">
    WITH RECURSIVE a AS (
      SELECT id, parent_fk
      FROM name_usage
      WHERE id = #{key}
    UNION ALL
      SELECT p.id, p.parent_fk
      FROM a JOIN name_usage p ON a.parent_fk = p.id
    )
    SELECT id FROM a
    WHERE id!=#{key}
    LIMIT 100;
  </select>

  <delete id="delete">
    DELETE FROM name_usage WHERE id=#{key}
  </delete>

  <update id="deleteLogically">
    UPDATE name_usage SET deleted=now() WHERE id=#{key}
  </update>

  <delete id="deleteByDataset">
    DELETE FROM name_usage WHERE dataset_key=#{uuid,jdbcType=OTHER}
  </delete>

  <delete id="deleteByDatasetAndDate">
    DELETE FROM name_usage WHERE dataset_key=#{uuid,jdbcType=OTHER} AND last_interpreted &lt; #{before}
  </delete>

  <!-- missing: nom_status,basionym_fk -->
  <insert id="insert">
    INSERT INTO name_usage (<include refid="select"/>)
    VALUES
    #{u.key},
    #{uuid},
    #{u.nameKey},
    #{u.rank},
    #{u.parentKey},
    #{u.status.isSynonym()},
    #{u.status},
    #{u.namePublishedInKey},
    #{u.accordingToKey},
    #{u.origin}
  </insert>

</mapper>

