<?xml version="1.0" encoding="utf-8" ?>
<schema name="checklistbank" version="1.5">
  <!-- attribute "name" is the name of this schema and is only used for display
     purposes. Applications should change this to reflect the nature of the search
     collection. version="1.2" is Solr's version number for the schema syntax
     and semantics. It should not normally be changed by applications. 1.0: multiValued
     attribute did not exist, all fields are multiValued by nature 1.1: multiValued
     attribute introduced, false by default 1.2: omitTermFreqAndPositions attribute
     introduced, true by default except for text fields. -->

  <types>
    <!-- field type definitions. The "name" attribute is just a label to be
        used by field definitions. The "class" attribute and any other attributes
        determine the real behavior of the fieldType. Class names starting with "solr"
        refer to java classes in the org.apache.solr.analysis package. -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -
        StrField and TextField support an optional compressThreshold which limits
        compression (if enabled in the derived fields) to values which exceed a certain
        size (in characters). -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded
        Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <fieldtype name="uuid" class="solr.UUIDField"/>

    <!-- The optional sortMissingLast and sortMissingFirst attributes are currently
        supported on types that are sorted internally as strings. This includes "string","boolean","sint","slong","sfloat","sdouble","pdate"
        - If sortMissingLast="true", then a sort on this field will cause documents
        without the field to come after documents with the field, regardless of the
        requested sort order (asc or desc). - If sortMissingFirst="true", then a
        sort on this field will cause documents without the field to come before
        documents with the field, regardless of the requested sort order. - If sortMissingLast="false"
        and sortMissingFirst="false" (the default), then default lucene sorting will
        be used which places docs without the field first in an ascending sort and
        last in a descending sort. -->

    <!-- Default numeric field types. For faster range queries, consider the
        tint/tfloat/tlong/tdouble types. -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

    <!-- A text field that uses WordDelimiterFilter to enable splitting and
        matching of words on case-change, alpha numeric boundaries, and non-alphanumeric
        chars, so that a query of "wifi" or "wi fi" could match a document containing
        "Wi-Fi". Synonyms and stopwords are customized by external files, and stemming
        is enabled. -->
    <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- Case insensitive stop word removal. -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
      </analyzer>
    </fieldType>

    <!-- lowercases the entire field value, keeping it as a single token. -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- folds Unicode characters which are not in the first 127 ASCII characters
              (the "Basic Latin" Unicode block) into their ASCII equivalents, if one exists:
              http://lucene.apache.org/java/3_4_0/api/all/org/apache/lucene/analysis/ASCIIFoldingFilter.html -->
        <filter class="solr.ASCIIFoldingFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Keeps the entire name as a single token, applying our sciname normalization to it. -->
    <fieldType name="sciname" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="org.gbif.checklistbank.lucene.ScientificNameNormalizerFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="tokenized" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Field type used for autocomplete functionality so we do prefix matches of entire strings -->
    <fieldType name="ngram" class="solr.TextField">
     <analyzer type="index">
       <tokenizer class="solr.KeywordTokenizerFactory"/>
       <filter class="solr.LowerCaseFilterFactory"/>
       <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="30"/>
     </analyzer>
     <analyzer type="query">
       <tokenizer class="solr.KeywordTokenizerFactory"/>
       <filter class="solr.LowerCaseFilterFactory"/>
     </analyzer>
    </fieldType>

    <!-- Field type used for autocomplete functionality so we do prefix matches of string tokens -->
    <fieldType name="ngram_tokenized" class="solr.TextField">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="20"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!--
    specifically targeting vernacular names in various languages
    tokenized text allows for highlighting
     -->
    <fieldType name="vernacular" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.ASCIIFoldingFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
  </types>

  <fields>
    <field name="key" type="int" indexed="true" stored="true" required="true"/>
    <!-- needed by updatelog for NRT search with soft commits -->
    <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>
    <field name="name_key" type="int" indexed="false" stored="true"/>
    <field name="nub_key" type="int" indexed="false" stored="true"/>
    <field name="dataset_key" type="uuid" indexed="true" stored="true" docValues="true"/>
    <field name="constituent_key" type="uuid" indexed="true" stored="true" docValues="true"/>
    <field name="parent_key" type="int" indexed="false" stored="true"/>
    <field name="parent" type="sciname" indexed="false" stored="true"/>
    <field name="accepted_key" type="int" indexed="false" stored="true"/>
    <field name="accepted" type="sciname" indexed="false" stored="true"/>
    <field name="basionym_key" type="int" indexed="false" stored="true"/>
    <field name="basionym" type="sciname" indexed="false" stored="true"/>

    <field name="scientific_name" type="tokenized" indexed="true" stored="true"/>
    <field name="canonical_name" type="sciname" indexed="true" stored="true"/>
    <field name="canonical_name_tokenized" type="tokenized" indexed="true" stored="true"/>
    <!-- ngram fields for auto-suggest functionality -->
    <field name="canonical_name_ngram" type="ngram" indexed="true" stored="false" omitNorms="true" omitTermFreqAndPositions="false"/>
    <field name="canonical_name_ngram_tokenized" type="ngram_tokenized" indexed="true" stored="false" omitNorms="true" omitTermFreqAndPositions="false"/>

    <field name="name_type" type="int" indexed="true" stored="true" docValues="true"/>
    <field name="authorship" type="text" indexed="false" stored="true"/>

    <field name="origin_key" type="int" indexed="true" stored="true" docValues="true"/>
    <field name="taxonomic_status_key" type="int" indexed="true" stored="true" docValues="true"/>
    <field name="nomenclatural_status_key" type="int" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <field name="threat_status_key" type="int" indexed="true" stored="true" multiValued="true" docValues="true"/>
    <field name="rank_key" type="int" indexed="true" stored="true" docValues="true"/>
    <field name="habitat_key" type="int" indexed="true" stored="true" multiValued="true" docValues="true"/>

    <field name="published_in" type="text" indexed="false" stored="true"/>
    <field name="according_to" type="text" indexed="false" stored="true"/>

    <field name="kingdom_key" type="int" indexed="false" stored="true"/>
    <field name="kingdom" type="sciname" indexed="true" stored="true"/>

    <field name="phylum_key" type="int" indexed="false" stored="true"/>
    <field name="phylum" type="sciname" indexed="true" stored="true"/>

    <field name="class_key" type="int" indexed="false" stored="true"/>
    <field name="class" type="sciname" indexed="true" stored="true"/>

    <field name="order_key" type="int" indexed="false" stored="true"/>
    <field name="order" type="sciname" indexed="true" stored="true"/>

    <field name="family_key" type="int" indexed="false" stored="true"/>
    <field name="family" type="sciname" indexed="true" stored="true"/>

    <field name="genus_key" type="int" indexed="false" stored="true"/>
    <field name="genus" type="sciname" indexed="true" stored="true"/>

    <field name="subgenus_key" type="int" indexed="false" stored="true"/>
    <field name="subgenus" type="sciname" indexed="true" stored="true"/>

    <field name="species_key" type="int" indexed="false" stored="true"/>
    <field name="species" type="sciname" indexed="false" stored="true"/>

    <field name="num_descendants" type="int" indexed="true" stored="true" docValues="true"/>

    <field name="source_id" type="string" indexed="false" stored="true"/>
    <field name="extinct" type="boolean" indexed="true" stored="true"/>

    <field name="description" type="text" indexed="true" stored="true" multiValued="true"/>

    <!-- store the field for highlighting -->
    <field name="vernacular_name" type="vernacular" indexed="true" stored="true" multiValued="true"/>
    <field name="vernacular_name_lang" type="sciname" indexed="true" stored="true" multiValued="true"/>

    <field name="higher_taxon_key" type="int" indexed="true" stored="false" multiValued="true" docValues="true"/>
    <field name="issues" type="int" indexed="true" stored="false" multiValued="true" docValues="true"/>
  </fields>
  <!-- Field to use to determine and enforce document uniqueness. Unless this
     field is marked with required="false", it will be a required field -->
  <uniqueKey>key</uniqueKey>

  <!-- field for the QueryParser to use when an explicit fieldname is absent -->
  <defaultSearchField>key</defaultSearchField>

  <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
  <solrQueryParser defaultOperator="OR"/>

  <copyField source="canonical_name" dest="canonical_name_ngram"/>
  <copyField source="canonical_name" dest="canonical_name_ngram_tokenized"/>
  <copyField source="canonical_name" dest="canonical_name_tokenized"/>

</schema>
